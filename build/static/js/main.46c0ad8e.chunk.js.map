{"version":3,"sources":["enums/VisibilityFilter.ts","lib/createReducer.ts","redux-modules/filter.ts","components/Link.tsx","containers/FilterLink.tsx","components/Footer.tsx","redux-modules/todo.ts","containers/AddTodo.tsx","components/Todo.js","components/TodoList.js","containers/VisibleTodoList.tsx","components/App.js","redux-modules/index.ts","index.tsx"],"names":["VisibilityFilter","createReducer","actionType","initialState","reducer","state","action","type","Object","assign","payload","update","visibility","All","filterReducer","Link","active","children","onClick","disabled","style","marginLeft","connect","ownProps","filter","dispatch","Footer","FilterLink","Active","Completed","nextTodoId","items","todoReducer","toggleTodo","id","getState","todo","map","completed","input","useRef","onSubmit","e","text","preventDefault","current","value","trim","ref","Todo","textDecoration","TodoList","todos","key","t","App","VisibleTodoList","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","render","document","getElementById"],"mappings":"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","file":"static/js/main.46c0ad8e.chunk.js","sourcesContent":["\nexport enum VisibilityFilter {\n  All = 'All',\n  Completed = 'Completed',\n  Active = 'Active',\n}\n","import { Reducer } from 'redux';\n\ninterface UpdateAction<S> {\n  type: string;\n  payload: Partial<S>;\n}\n\ninterface Updater<S, A> {\n  (payload: Partial<S>): A;\n}\n\ninterface ReducerConfig<S> {\n  reducer: Reducer<S, UpdateAction<S>>;\n  update: Updater<S, UpdateAction<S>>;\n}\n\n/**\n * Creates a simple reducer and a generic `update` action creator. The update action works a bit\n * like a React Component's setState method in that it will perform a shallow merge with the\n * existing state.\n *\n * @example\n * interface UserState { isLoggedIn: boolean; }\n * const initialState = { isLoggedIn: false };\n * const { reducer, update } = createReducer<UserState>('user/UPDATE', initialState);\n * const login = () => update({ isLoggedIn: true });\n *\n * class SomeConnectedComponent extends React.Component {\n *   onLoginClick = () => {\n *     this.props.dispatch(login());\n *   };\n * }\n */\nexport const createReducer = <S>(actionType: string, initialState: S): ReducerConfig<S> => {\n\n  const reducer: Reducer<S, UpdateAction<S>> = (state = initialState, action) => {\n    if (action.type === actionType) {\n      return Object.assign({}, state, action.payload);\n    }\n    return state;\n  };\n\n  const update: Updater<S, UpdateAction<S>> = payload => ({ type: actionType, payload });\n\n  return { reducer, update };\n}\n","import { VisibilityFilter } from 'enums/VisibilityFilter';\nimport { createReducer } from 'lib/createReducer';\n\nexport interface FilterState {\n  visibility: VisibilityFilter;\n}\n\nconst initialFilterState: FilterState = {\n  visibility: VisibilityFilter.All,\n};\n\nconst { reducer, update } = createReducer('filter/UPDATE', initialFilterState);\nexport const filterReducer = reducer;\n\nexport const setVisibilityFilter = (visibility: VisibilityFilter) => update({ visibility });\n","import React from 'react';\n\ninterface LinkProps {\n  active: boolean;\n  onClick: () => void;\n}\n\nconst Link: React.FC<LinkProps> = ({ active, children, onClick }) => (\n    <button\n       onClick={onClick}\n       disabled={active}\n       style={{\n           marginLeft: '4px',\n       }}\n    >\n      {children}\n    </button>\n);\n\nexport default Link;\n","import { connect } from 'react-redux'\nimport { setVisibilityFilter } from '../redux-modules/filter'\nimport Link from '../components/Link'\nimport { RootState } from 'redux-modules/RootState'\nimport { VisibilityFilter } from 'enums/VisibilityFilter'\n\ninterface FilterLinkProps {\n  filter: VisibilityFilter;\n  children?: React.ReactNode;\n}\n\nexport default connect(\n  (state: RootState, ownProps: FilterLinkProps) => ({\n    active: ownProps.filter === state.filter.visibility\n  }),\n  (dispatch, ownProps: FilterLinkProps) => ({\n    onClick: () => dispatch(setVisibilityFilter(ownProps.filter))\n  })\n)(Link)\n","import React from 'react'\nimport FilterLink from '../containers/FilterLink'\nimport { VisibilityFilter } from 'enums/VisibilityFilter'\n\nconst Footer = () => (\n  <div>\n    <span>Show: </span>\n    <FilterLink filter={VisibilityFilter.All}>\n      All\n    </FilterLink>\n    <FilterLink filter={VisibilityFilter.Active}>\n      Active\n    </FilterLink>\n    <FilterLink filter={VisibilityFilter.Completed}>\n      Completed\n    </FilterLink>\n  </div>\n)\n\nexport default Footer\n","import { Todo } from 'models/Todo';\nimport { VisibilityFilter } from 'enums/VisibilityFilter';\nimport { RootThunk } from './RootState';\nimport { createReducer } from 'lib/createReducer';\n\nlet nextTodoId = 0;\n\nexport type TodoState = {\n  items: Todo[];\n}\n\nconst initialTodoState: TodoState = {\n  items: [],\n};\n\nconst { reducer, update } = createReducer('todos/UPDATE', initialTodoState);\nexport const todoReducer = reducer;\n\nexport const addTodo = (text: string): RootThunk<void> => (dispatch, getState) => {\n  const items: Todo[] = [\n    ...getState().todo.items,\n    { id: nextTodoId++, text, completed: false },\n  ];\n  dispatch(update({ items }));\n};\n\nexport const toggleTodo = (id: number): RootThunk<void> => (dispatch, getState) => {\n  const items = getState().todo.items.map(todo =>\n    (todo.id === id)\n      ? { ...todo, completed: !todo.completed }\n      : todo\n  );\n  dispatch(update({ items }));\n};\n\nexport const getVisibleTodos = (filter: VisibilityFilter) => (todo: TodoState) => {\n  switch (filter) {\n    case VisibilityFilter.All:\n      return todo.items;\n    case VisibilityFilter.Completed:\n      return todo.items.filter(t => t.completed);\n    case VisibilityFilter.Active:\n      return todo.items.filter(t => !t.completed);\n  }\n};\n","import React, { useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { addTodo } from '../redux-modules/todo';\nimport { AnyAction } from 'redux';\nimport { ThunkDispatch } from 'redux-thunk';\nimport { RootState } from 'redux-modules/RootState';\n\ninterface AddTodoProps {\n  dispatch: ThunkDispatch<RootState, {}, AnyAction>;\n}\n\nconst AddTodo: React.FC<AddTodoProps> = ({ dispatch }) => {\n  const input = useRef<HTMLInputElement>(null);\n\n  return (\n    <div>\n      <form onSubmit={e => {\n        e.preventDefault();\n        if (!input.current || !input.current.value.trim()) {\n          return;\n        }\n        dispatch(addTodo(input.current.value));\n        input.current.value = '';\n      }}>\n        <input ref={input} />\n        <button type=\"submit\">\n          Add Todo\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default connect()(AddTodo);\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Todo = ({ onClick, completed, text }) => (\n  <li\n    onClick={onClick}\n    style={{\n      textDecoration: completed ? 'line-through' : 'none'\n    }}\n  >\n    {text}\n  </li>\n)\n\nTodo.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  completed: PropTypes.bool.isRequired,\n  text: PropTypes.string.isRequired\n}\n\nexport default Todo\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Todo from './Todo'\n\nconst TodoList = ({ todos, toggleTodo }) => (\n  <ul>\n    {todos.map(todo =>\n      <Todo\n        key={todo.id}\n        {...todo}\n        onClick={() => toggleTodo(todo.id)}\n      />\n    )}\n  </ul>\n)\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    completed: PropTypes.bool.isRequired,\n    text: PropTypes.string.isRequired\n  }).isRequired).isRequired,\n  toggleTodo: PropTypes.func.isRequired\n}\n\nexport default TodoList\n","import { connect } from 'react-redux'\nimport TodoList from '../components/TodoList'\nimport { RootState, RootDispatch } from 'redux-modules/RootState'\nimport { getVisibleTodos, toggleTodo } from 'redux-modules/todo'\n\nconst mapStateToProps = (state: RootState) => ({\n  todos: getVisibleTodos(state.filter.visibility)(state.todo),\n});\n\nconst mapDispatchToProps = (dispatch: RootDispatch) => ({\n  toggleTodo: (id: number) => dispatch(toggleTodo(id))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(TodoList);\n","import React from 'react'\nimport Footer from './Footer'\nimport AddTodo from '../containers/AddTodo'\nimport VisibleTodoList from '../containers/VisibleTodoList'\n\nconst App = () => (\n  <div>\n    <AddTodo />\n    <VisibleTodoList />\n    <Footer />\n  </div>\n)\n\nexport default App\n","import { combineReducers, Reducer } from 'redux';\n\nimport { todoReducer } from './todo';\nimport { filterReducer } from './filter';\nimport { RootState } from './RootState';\n\nexport const rootReducer: Reducer<RootState> = combineReducers({\n  todo: todoReducer,\n  filter: filterReducer,\n});\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport App from './components/App';\nimport { rootReducer } from './redux-modules';\n\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}